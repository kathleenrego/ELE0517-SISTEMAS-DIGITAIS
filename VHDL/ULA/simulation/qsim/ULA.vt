// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/16/2019 12:01:09"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    ula
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ula_vlg_sample_tst(
	ula_in0,
	ula_in1,
	ula_opcode,
	sampler_tx
);
input [7:0] ula_in0;
input [7:0] ula_in1;
input [2:0] ula_opcode;
output sampler_tx;

reg sample;
time current_time;
always @(ula_in0 or ula_in1 or ula_opcode)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module ula_vlg_check_tst (
	ula_flagC,
	ula_flagO,
	ula_flagS,
	ula_out,
	sampler_rx
);
input  ula_flagC;
input  ula_flagO;
input  ula_flagS;
input [7:0] ula_out;
input sampler_rx;

reg  ula_flagC_expected;
reg  ula_flagO_expected;
reg  ula_flagS_expected;
reg [7:0] ula_out_expected;

reg  ula_flagC_prev;
reg  ula_flagO_prev;
reg  ula_flagS_prev;
reg [7:0] ula_out_prev;

reg  ula_flagC_expected_prev;
reg  ula_flagO_expected_prev;
reg  ula_flagS_expected_prev;
reg [7:0] ula_out_expected_prev;

reg  last_ula_flagC_exp;
reg  last_ula_flagO_exp;
reg  last_ula_flagS_exp;
reg [7:0] last_ula_out_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	ula_flagC_prev = ula_flagC;
	ula_flagO_prev = ula_flagO;
	ula_flagS_prev = ula_flagS;
	ula_out_prev = ula_out;
end

// update expected /o prevs

always @(trigger)
begin
	ula_flagC_expected_prev = ula_flagC_expected;
	ula_flagO_expected_prev = ula_flagO_expected;
	ula_flagS_expected_prev = ula_flagS_expected;
	ula_out_expected_prev = ula_out_expected;
end


// expected ula_out[ 7 ]
initial
begin
	ula_out_expected[7] = 1'bX;
end 
// expected ula_out[ 6 ]
initial
begin
	ula_out_expected[6] = 1'bX;
end 
// expected ula_out[ 5 ]
initial
begin
	ula_out_expected[5] = 1'bX;
end 
// expected ula_out[ 4 ]
initial
begin
	ula_out_expected[4] = 1'bX;
end 
// expected ula_out[ 3 ]
initial
begin
	ula_out_expected[3] = 1'bX;
end 
// expected ula_out[ 2 ]
initial
begin
	ula_out_expected[2] = 1'bX;
end 
// expected ula_out[ 1 ]
initial
begin
	ula_out_expected[1] = 1'bX;
end 
// expected ula_out[ 0 ]
initial
begin
	ula_out_expected[0] = 1'bX;
end 

// expected ula_flagC
initial
begin
	ula_flagC_expected = 1'bX;
end 

// expected ula_flagO
initial
begin
	ula_flagO_expected = 1'bX;
end 

// expected ula_flagS
initial
begin
	ula_flagS_expected = 1'bX;
end 
// generate trigger
always @(ula_flagC_expected or ula_flagC or ula_flagO_expected or ula_flagO or ula_flagS_expected or ula_flagS or ula_out_expected or ula_out)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected ula_flagC = %b | expected ula_flagO = %b | expected ula_flagS = %b | expected ula_out = %b | ",ula_flagC_expected_prev,ula_flagO_expected_prev,ula_flagS_expected_prev,ula_out_expected_prev);
	$display("| real ula_flagC = %b | real ula_flagO = %b | real ula_flagS = %b | real ula_out = %b | ",ula_flagC_prev,ula_flagO_prev,ula_flagS_prev,ula_out_prev);
`endif
	if (
		( ula_flagC_expected_prev !== 1'bx ) && ( ula_flagC_prev !== ula_flagC_expected_prev )
		&& ((ula_flagC_expected_prev !== last_ula_flagC_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ula_flagC :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ula_flagC_expected_prev);
		$display ("     Real value = %b", ula_flagC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ula_flagC_exp = ula_flagC_expected_prev;
	end
	if (
		( ula_flagO_expected_prev !== 1'bx ) && ( ula_flagO_prev !== ula_flagO_expected_prev )
		&& ((ula_flagO_expected_prev !== last_ula_flagO_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ula_flagO :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ula_flagO_expected_prev);
		$display ("     Real value = %b", ula_flagO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ula_flagO_exp = ula_flagO_expected_prev;
	end
	if (
		( ula_flagS_expected_prev !== 1'bx ) && ( ula_flagS_prev !== ula_flagS_expected_prev )
		&& ((ula_flagS_expected_prev !== last_ula_flagS_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ula_flagS :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ula_flagS_expected_prev);
		$display ("     Real value = %b", ula_flagS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ula_flagS_exp = ula_flagS_expected_prev;
	end
	if (
		( ula_out_expected_prev[0] !== 1'bx ) && ( ula_out_prev[0] !== ula_out_expected_prev[0] )
		&& ((ula_out_expected_prev[0] !== last_ula_out_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ula_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ula_out_expected_prev);
		$display ("     Real value = %b", ula_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_ula_out_exp[0] = ula_out_expected_prev[0];
	end
	if (
		( ula_out_expected_prev[1] !== 1'bx ) && ( ula_out_prev[1] !== ula_out_expected_prev[1] )
		&& ((ula_out_expected_prev[1] !== last_ula_out_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ula_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ula_out_expected_prev);
		$display ("     Real value = %b", ula_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_ula_out_exp[1] = ula_out_expected_prev[1];
	end
	if (
		( ula_out_expected_prev[2] !== 1'bx ) && ( ula_out_prev[2] !== ula_out_expected_prev[2] )
		&& ((ula_out_expected_prev[2] !== last_ula_out_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ula_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ula_out_expected_prev);
		$display ("     Real value = %b", ula_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_ula_out_exp[2] = ula_out_expected_prev[2];
	end
	if (
		( ula_out_expected_prev[3] !== 1'bx ) && ( ula_out_prev[3] !== ula_out_expected_prev[3] )
		&& ((ula_out_expected_prev[3] !== last_ula_out_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ula_out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ula_out_expected_prev);
		$display ("     Real value = %b", ula_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_ula_out_exp[3] = ula_out_expected_prev[3];
	end
	if (
		( ula_out_expected_prev[4] !== 1'bx ) && ( ula_out_prev[4] !== ula_out_expected_prev[4] )
		&& ((ula_out_expected_prev[4] !== last_ula_out_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ula_out[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ula_out_expected_prev);
		$display ("     Real value = %b", ula_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_ula_out_exp[4] = ula_out_expected_prev[4];
	end
	if (
		( ula_out_expected_prev[5] !== 1'bx ) && ( ula_out_prev[5] !== ula_out_expected_prev[5] )
		&& ((ula_out_expected_prev[5] !== last_ula_out_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ula_out[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ula_out_expected_prev);
		$display ("     Real value = %b", ula_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_ula_out_exp[5] = ula_out_expected_prev[5];
	end
	if (
		( ula_out_expected_prev[6] !== 1'bx ) && ( ula_out_prev[6] !== ula_out_expected_prev[6] )
		&& ((ula_out_expected_prev[6] !== last_ula_out_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ula_out[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ula_out_expected_prev);
		$display ("     Real value = %b", ula_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_ula_out_exp[6] = ula_out_expected_prev[6];
	end
	if (
		( ula_out_expected_prev[7] !== 1'bx ) && ( ula_out_prev[7] !== ula_out_expected_prev[7] )
		&& ((ula_out_expected_prev[7] !== last_ula_out_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ula_out[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ula_out_expected_prev);
		$display ("     Real value = %b", ula_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_ula_out_exp[7] = ula_out_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module ula_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] ula_in0;
reg [7:0] ula_in1;
reg [2:0] ula_opcode;
// wires                                               
wire ula_flagC;
wire ula_flagO;
wire ula_flagS;
wire [7:0] ula_out;

wire sampler;                             

// assign statements (if any)                          
ula i1 (
// port map - connection between master ports and signals/registers   
	.ula_flagC(ula_flagC),
	.ula_flagO(ula_flagO),
	.ula_flagS(ula_flagS),
	.ula_in0(ula_in0),
	.ula_in1(ula_in1),
	.ula_opcode(ula_opcode),
	.ula_out(ula_out)
);
// ula_in0[ 7 ]
initial
begin
	ula_in0[7] = 1'b0;
	ula_in0[7] = #100000 1'b1;
	ula_in0[7] = #100000 1'b0;
end 
// ula_in0[ 6 ]
initial
begin
	ula_in0[6] = 1'b0;
	ula_in0[6] = #50000 1'b1;
	ula_in0[6] = #150000 1'b0;
end 
// ula_in0[ 5 ]
initial
begin
	ula_in0[5] = 1'b0;
	ula_in0[5] = #50000 1'b1;
	ula_in0[5] = #150000 1'b0;
end 
// ula_in0[ 4 ]
initial
begin
	ula_in0[4] = 1'b0;
	ula_in0[4] = #100000 1'b1;
	ula_in0[4] = #100000 1'b0;
end 
// ula_in0[ 3 ]
initial
begin
	ula_in0[3] = 1'b0;
end 
// ula_in0[ 2 ]
initial
begin
	ula_in0[2] = 1'b0;
	ula_in0[2] = #50000 1'b1;
	ula_in0[2] = #150000 1'b0;
end 
// ula_in0[ 1 ]
initial
begin
	ula_in0[1] = 1'b0;
	ula_in0[1] = #100000 1'b1;
	ula_in0[1] = #100000 1'b0;
end 
// ula_in0[ 0 ]
initial
begin
	ula_in0[0] = 1'b0;
	ula_in0[0] = #50000 1'b1;
	ula_in0[0] = #150000 1'b0;
end 
// ula_in1[ 7 ]
initial
begin
	ula_in1[7] = 1'b0;
end 
// ula_in1[ 6 ]
initial
begin
	ula_in1[6] = 1'b0;
end 
// ula_in1[ 5 ]
initial
begin
	ula_in1[5] = 1'b0;
end 
// ula_in1[ 4 ]
initial
begin
	ula_in1[4] = 1'b0;
end 
// ula_in1[ 3 ]
initial
begin
	ula_in1[3] = 1'b0;
end 
// ula_in1[ 2 ]
initial
begin
	ula_in1[2] = 1'b0;
	ula_in1[2] = #150000 1'b1;
	ula_in1[2] = #50000 1'b0;
end 
// ula_in1[ 1 ]
initial
begin
	ula_in1[1] = 1'b0;
	ula_in1[1] = #100000 1'b1;
	ula_in1[1] = #50000 1'b0;
end 
// ula_in1[ 0 ]
initial
begin
	ula_in1[0] = 1'b0;
	ula_in1[0] = #50000 1'b1;
	ula_in1[0] = #100000 1'b0;
end 
// ula_opcode[ 2 ]
initial
begin
	ula_opcode[2] = 1'b1;
end 
// ula_opcode[ 1 ]
initial
begin
	ula_opcode[1] = 1'b0;
end 
// ula_opcode[ 0 ]
initial
begin
	ula_opcode[0] = 1'b1;
end 

ula_vlg_sample_tst tb_sample (
	.ula_in0(ula_in0),
	.ula_in1(ula_in1),
	.ula_opcode(ula_opcode),
	.sampler_tx(sampler)
);

ula_vlg_check_tst tb_out(
	.ula_flagC(ula_flagC),
	.ula_flagO(ula_flagO),
	.ula_flagS(ula_flagS),
	.ula_out(ula_out),
	.sampler_rx(sampler)
);
endmodule

