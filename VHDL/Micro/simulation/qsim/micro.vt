// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/27/2019 11:52:32"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    micro
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module micro_vlg_sample_tst(
	clk,
	data_i0,
	data_i1,
	rst,
	sampler_tx
);
input  clk;
input [7:0] data_i0;
input [7:0] data_i1;
input  rst;
output sampler_tx;

reg sample;
time current_time;
always @(clk or data_i0 or data_i1 or rst)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module micro_vlg_check_tst (
	data_o0,
	data_o1,
	sampler_rx
);
input [7:0] data_o0;
input [7:0] data_o1;
input sampler_rx;

reg [7:0] data_o0_expected;
reg [7:0] data_o1_expected;

reg [7:0] data_o0_prev;
reg [7:0] data_o1_prev;

reg [7:0] data_o0_expected_prev;
reg [7:0] data_o1_expected_prev;

reg [7:0] last_data_o0_exp;
reg [7:0] last_data_o1_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	data_o0_prev = data_o0;
	data_o1_prev = data_o1;
end

// update expected /o prevs

always @(trigger)
begin
	data_o0_expected_prev = data_o0_expected;
	data_o1_expected_prev = data_o1_expected;
end


// expected data_o0[ 7 ]
initial
begin
	data_o0_expected[7] = 1'bX;
	data_o0_expected[7] = #4999000 1'b0;
end 
// expected data_o0[ 6 ]
initial
begin
	data_o0_expected[6] = 1'bX;
	data_o0_expected[6] = #4999000 1'b0;
end 
// expected data_o0[ 5 ]
initial
begin
	data_o0_expected[5] = 1'bX;
	data_o0_expected[5] = #4999000 1'b0;
end 
// expected data_o0[ 4 ]
initial
begin
	data_o0_expected[4] = 1'bX;
	data_o0_expected[4] = #4999000 1'b0;
end 
// expected data_o0[ 3 ]
initial
begin
	data_o0_expected[3] = 1'bX;
	data_o0_expected[3] = #4999000 1'b0;
end 
// expected data_o0[ 2 ]
initial
begin
	data_o0_expected[2] = 1'bX;
	data_o0_expected[2] = #4999000 1'b0;
end 
// expected data_o0[ 1 ]
initial
begin
	data_o0_expected[1] = 1'bX;
	data_o0_expected[1] = #4999000 1'b0;
end 
// expected data_o0[ 0 ]
initial
begin
	data_o0_expected[0] = 1'bX;
	data_o0_expected[0] = #4999000 1'b0;
end 
// expected data_o1[ 7 ]
initial
begin
	data_o1_expected[7] = 1'bX;
	data_o1_expected[7] = #4999000 1'b0;
end 
// expected data_o1[ 6 ]
initial
begin
	data_o1_expected[6] = 1'bX;
	data_o1_expected[6] = #4999000 1'b0;
end 
// expected data_o1[ 5 ]
initial
begin
	data_o1_expected[5] = 1'bX;
	data_o1_expected[5] = #4999000 1'b0;
end 
// expected data_o1[ 4 ]
initial
begin
	data_o1_expected[4] = 1'bX;
	data_o1_expected[4] = #4999000 1'b0;
end 
// expected data_o1[ 3 ]
initial
begin
	data_o1_expected[3] = 1'bX;
	data_o1_expected[3] = #4999000 1'b0;
end 
// expected data_o1[ 2 ]
initial
begin
	data_o1_expected[2] = 1'bX;
	data_o1_expected[2] = #4999000 1'b0;
end 
// expected data_o1[ 1 ]
initial
begin
	data_o1_expected[1] = 1'bX;
	data_o1_expected[1] = #4999000 1'b0;
end 
// expected data_o1[ 0 ]
initial
begin
	data_o1_expected[0] = 1'bX;
	data_o1_expected[0] = #4999000 1'b0;
end 
// generate trigger
always @(data_o0_expected or data_o0 or data_o1_expected or data_o1)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected data_o0 = %b | expected data_o1 = %b | ",data_o0_expected_prev,data_o1_expected_prev);
	$display("| real data_o0 = %b | real data_o1 = %b | ",data_o0_prev,data_o1_prev);
`endif
	if (
		( data_o0_expected_prev[0] !== 1'bx ) && ( data_o0_prev[0] !== data_o0_expected_prev[0] )
		&& ((data_o0_expected_prev[0] !== last_data_o0_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_o0[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_o0_expected_prev);
		$display ("     Real value = %b", data_o0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_o0_exp[0] = data_o0_expected_prev[0];
	end
	if (
		( data_o0_expected_prev[1] !== 1'bx ) && ( data_o0_prev[1] !== data_o0_expected_prev[1] )
		&& ((data_o0_expected_prev[1] !== last_data_o0_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_o0[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_o0_expected_prev);
		$display ("     Real value = %b", data_o0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_o0_exp[1] = data_o0_expected_prev[1];
	end
	if (
		( data_o0_expected_prev[2] !== 1'bx ) && ( data_o0_prev[2] !== data_o0_expected_prev[2] )
		&& ((data_o0_expected_prev[2] !== last_data_o0_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_o0[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_o0_expected_prev);
		$display ("     Real value = %b", data_o0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_o0_exp[2] = data_o0_expected_prev[2];
	end
	if (
		( data_o0_expected_prev[3] !== 1'bx ) && ( data_o0_prev[3] !== data_o0_expected_prev[3] )
		&& ((data_o0_expected_prev[3] !== last_data_o0_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_o0[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_o0_expected_prev);
		$display ("     Real value = %b", data_o0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_o0_exp[3] = data_o0_expected_prev[3];
	end
	if (
		( data_o0_expected_prev[4] !== 1'bx ) && ( data_o0_prev[4] !== data_o0_expected_prev[4] )
		&& ((data_o0_expected_prev[4] !== last_data_o0_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_o0[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_o0_expected_prev);
		$display ("     Real value = %b", data_o0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_o0_exp[4] = data_o0_expected_prev[4];
	end
	if (
		( data_o0_expected_prev[5] !== 1'bx ) && ( data_o0_prev[5] !== data_o0_expected_prev[5] )
		&& ((data_o0_expected_prev[5] !== last_data_o0_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_o0[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_o0_expected_prev);
		$display ("     Real value = %b", data_o0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_o0_exp[5] = data_o0_expected_prev[5];
	end
	if (
		( data_o0_expected_prev[6] !== 1'bx ) && ( data_o0_prev[6] !== data_o0_expected_prev[6] )
		&& ((data_o0_expected_prev[6] !== last_data_o0_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_o0[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_o0_expected_prev);
		$display ("     Real value = %b", data_o0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_o0_exp[6] = data_o0_expected_prev[6];
	end
	if (
		( data_o0_expected_prev[7] !== 1'bx ) && ( data_o0_prev[7] !== data_o0_expected_prev[7] )
		&& ((data_o0_expected_prev[7] !== last_data_o0_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_o0[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_o0_expected_prev);
		$display ("     Real value = %b", data_o0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_o0_exp[7] = data_o0_expected_prev[7];
	end
	if (
		( data_o1_expected_prev[0] !== 1'bx ) && ( data_o1_prev[0] !== data_o1_expected_prev[0] )
		&& ((data_o1_expected_prev[0] !== last_data_o1_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_o1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_o1_expected_prev);
		$display ("     Real value = %b", data_o1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_o1_exp[0] = data_o1_expected_prev[0];
	end
	if (
		( data_o1_expected_prev[1] !== 1'bx ) && ( data_o1_prev[1] !== data_o1_expected_prev[1] )
		&& ((data_o1_expected_prev[1] !== last_data_o1_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_o1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_o1_expected_prev);
		$display ("     Real value = %b", data_o1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_o1_exp[1] = data_o1_expected_prev[1];
	end
	if (
		( data_o1_expected_prev[2] !== 1'bx ) && ( data_o1_prev[2] !== data_o1_expected_prev[2] )
		&& ((data_o1_expected_prev[2] !== last_data_o1_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_o1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_o1_expected_prev);
		$display ("     Real value = %b", data_o1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_o1_exp[2] = data_o1_expected_prev[2];
	end
	if (
		( data_o1_expected_prev[3] !== 1'bx ) && ( data_o1_prev[3] !== data_o1_expected_prev[3] )
		&& ((data_o1_expected_prev[3] !== last_data_o1_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_o1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_o1_expected_prev);
		$display ("     Real value = %b", data_o1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_o1_exp[3] = data_o1_expected_prev[3];
	end
	if (
		( data_o1_expected_prev[4] !== 1'bx ) && ( data_o1_prev[4] !== data_o1_expected_prev[4] )
		&& ((data_o1_expected_prev[4] !== last_data_o1_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_o1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_o1_expected_prev);
		$display ("     Real value = %b", data_o1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_o1_exp[4] = data_o1_expected_prev[4];
	end
	if (
		( data_o1_expected_prev[5] !== 1'bx ) && ( data_o1_prev[5] !== data_o1_expected_prev[5] )
		&& ((data_o1_expected_prev[5] !== last_data_o1_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_o1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_o1_expected_prev);
		$display ("     Real value = %b", data_o1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_o1_exp[5] = data_o1_expected_prev[5];
	end
	if (
		( data_o1_expected_prev[6] !== 1'bx ) && ( data_o1_prev[6] !== data_o1_expected_prev[6] )
		&& ((data_o1_expected_prev[6] !== last_data_o1_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_o1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_o1_expected_prev);
		$display ("     Real value = %b", data_o1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_o1_exp[6] = data_o1_expected_prev[6];
	end
	if (
		( data_o1_expected_prev[7] !== 1'bx ) && ( data_o1_prev[7] !== data_o1_expected_prev[7] )
		&& ((data_o1_expected_prev[7] !== last_data_o1_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_o1[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_o1_expected_prev);
		$display ("     Real value = %b", data_o1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_data_o1_exp[7] = data_o1_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#10000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module micro_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [7:0] data_i0;
reg [7:0] data_i1;
reg rst;
// wires                                               
wire [7:0] data_o0;
wire [7:0] data_o1;

wire sampler;                             

// assign statements (if any)                          
micro i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.data_i0(data_i0),
	.data_i1(data_i1),
	.data_o0(data_o0),
	.data_o1(data_o1),
	.rst(rst)
);

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 

// rst
initial
begin
	rst = 1'b0;
end 
// data_i0[ 7 ]
initial
begin
	data_i0[7] = 1'b0;
end 
// data_i0[ 6 ]
initial
begin
	data_i0[6] = 1'b0;
end 
// data_i0[ 5 ]
initial
begin
	data_i0[5] = 1'b0;
end 
// data_i0[ 4 ]
initial
begin
	data_i0[4] = 1'b0;
end 
// data_i0[ 3 ]
initial
begin
	data_i0[3] = 1'b0;
	data_i0[3] = #6080000 1'b1;
	data_i0[3] = #1600000 1'b0;
end 
// data_i0[ 2 ]
initial
begin
	data_i0[2] = 1'b0;
	data_i0[2] = #3200000 1'b1;
	data_i0[2] = #1440000 1'b0;
	data_i0[2] = #1440000 1'b1;
	data_i0[2] = #1600000 1'b0;
end 
// data_i0[ 1 ]
initial
begin
	data_i0[1] = 1'b0;
	data_i0[1] = #6080000 1'b1;
	data_i0[1] = #1600000 1'b0;
end 
// data_i0[ 0 ]
initial
begin
	data_i0[0] = 1'b0;
	data_i0[0] = #480000 1'b1;
	data_i0[0] = #1440000 1'b0;
end 
// data_i1[ 7 ]
initial
begin
	data_i1[7] = 1'b0;
end 
// data_i1[ 6 ]
initial
begin
	data_i1[6] = 1'b0;
end 
// data_i1[ 5 ]
initial
begin
	data_i1[5] = 1'b0;
end 
// data_i1[ 4 ]
initial
begin
	data_i1[4] = 1'b0;
end 
// data_i1[ 3 ]
initial
begin
	data_i1[3] = 1'b0;
end 
// data_i1[ 2 ]
initial
begin
	data_i1[2] = 1'b0;
end 
// data_i1[ 1 ]
initial
begin
	data_i1[1] = 1'b0;
end 
// data_i1[ 0 ]
initial
begin
	data_i1[0] = 1'b0;
end 

micro_vlg_sample_tst tb_sample (
	.clk(clk),
	.data_i0(data_i0),
	.data_i1(data_i1),
	.rst(rst),
	.sampler_tx(sampler)
);

micro_vlg_check_tst tb_out(
	.data_o0(data_o0),
	.data_o1(data_o1),
	.sampler_rx(sampler)
);
endmodule

